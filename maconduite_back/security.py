"""
This module provides security for the Flask application.

Specifically, it provides a session mechanism and Role-Based Access Control (or RBAC) with
JSON Web Tokens (or JWT). These tokens are encoded in the function generate_token(), and
are decoded in the decorator @auth_required.

Here is how it works : 
(1) A user makes a POST request to /auth/login/<role> with a JSON body containing its
email and password. There are only 3 roles:
- if the user is an Admin  → POST /auth/login/admin
- if the user is a Client  → POST /auth/login/client

(2) The server responds with a JSON Web Token (or access token) certifying that the user
has been authenticated with a specific role. This access token is generated by the function
generate_token().

(3) When a user makes subsequent requests to a protected route (i.e. a route that requires
authentication), he includes its access token in the JSON body of the request.

(4) The servers checks that the user is authenticated and that he's allowed to access this
protected route based on its role. This is done in the decorator @auth required.

The RBAC rules are simple:
- if the user is an Admin  → he can access all Sessions
- if the user is a Client  → he can access only his Sessions
"""
from datetime import datetime, timedelta
import logging
from flask import Blueprint, request, jsonify, abort, Response, current_app


logger = logging.getLogger(__name__)

def generate_token(public_id, role):
    """Generate an access token for the user.

    The token is a JSON Web Token (or JWT), and it contains user information cryptographically
    signed by the server (i.e. with the server JWT_SECRET_KEY). Therefore, the contents of
    the token are readable by everyone, but no one can forge a similar token.
    See also: https://jwt.io/introduction

    Parameters:
        public_id (int) : the public id of the user whom we generate the token for.
        role (string)   : can be 'client' or 'admin'.
                          This role determines what the user will have access to.

    Returns:
        string: the token (e.g. 'eyJhbGciOiJIUz.I1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiO')

    Details:
        On https://jwt.io/ you can paste a token and see its content or check the signature.
    """
    expiration_date = (
        datetime.now() + timedelta(hours = current_app.config['JWT_EXP_DELTA_HOURS'])
    )
    logger.info(f'access token expiration date : {expiration_date}')
    token_contents = {
            'public_id' : public_id,
            'exp'       : expiration_date,
            'role'      : role,
    }
    token = jwt.encode(
        payload   =token_contents,
        key       =current_app.config['JWT_SECRET'],
        algorithm =current_app.config['JWT_ALGORITHM'],
    )
    return token